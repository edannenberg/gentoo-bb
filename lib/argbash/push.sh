#!/bin/bash

_help_command_description="Push namespace(s) or image(s) to a registry"

# ARGBASH_WRAP([opt-global])
# ARG_POSITIONAL_INF([target-id],[Namespace or image to push, i.e. myns or myns/myimage],[1])
# ARG_OPTIONAL_SINGLE([registry-url],[r],[Docker registry url used for pushing, if omitted docker.io is used])
# ARG_HELP([])
# ARGBASH_SET_INDENT([    ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.3.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die()
{
    local _ret=$2
    test -n "$_ret" || _ret=1
    test "$_PRINT_HELP" = yes && print_help >&2
    echo "$1" >&2
    exit ${_ret}
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_target_id=('' )
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_verbose=off
_arg_registry_url=

print_help ()
{
    printf 'Usage: %s [--(no-)verbose] [-r|--registry-url <arg>] [-h|--help] <target-id-1> [<target-id-2>] ... [<target-id-n>] ...\n' "$0"
    printf "\t%s\n" "<target-id>: Namespace or image to push, i.e. myns or myns/myimage"
    printf "\t%s\n" "-r,--registry-url: Docker registry url used for pushing, if omitted docker.io is used (no default)"
    printf "\t%s\n" "-h,--help: Prints help"
}

# THE PARSING ITSELF
while test $# -gt 0
do
    _key="$1"
    case "$_key" in
        --no-verbose|--verbose)
            _arg_verbose="on"
            _args_opt_global_opt+=("${_key%%=*}")
            test "${1:0:5}" = "--no-" && _arg_verbose="off"
            ;;
        -r*|--registry-url|--registry-url=*)
            _val="${_key##--registry-url=}"
            _val2="${_key##-r}"
            if test "$_val" = "$_key"
            then
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _val="$2"
                shift
            elif test "$_val2" != "$_key" -a -n "$_val2"
            then
                _val="$_val2"
            fi
            _arg_registry_url="$_val"
            ;;
        -h*|--help)
            print_help
            exit 0
            ;;
        *)
            _positionals+=("$1")
            ;;
    esac
    shift
done

_positional_names=('_arg_target_id' )
test ${#_positionals[@]} -lt 1 && _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1, but got only ${#_positionals[@]}." 1
_OUR_ARGS=$((${#_positionals[@]} - ${#_positional_names[@]}))
for (( ii = 0; ii < _OUR_ARGS; ii++))
do
    _positional_names+=("_arg_target_id[(($ii + 1))]")
done

for (( ii = 0; ii < ${#_positionals[@]}; ii++))
do
    eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
done

# OTHER STUFF GENERATED BY Argbash
_args_opt_global=("${_args_opt_global_opt[@]}" "${_args_opt_global_pos[@]}")

### END OF CODE GENERATED BY Argbash (sortof) ### ])
